module audio_player(
    input wire mclk,
    input wire [15:0] sw,
    input wire [3:0] btn,
    output reg left_audio_out,
    output reg right_audio_out
);

localparam MEM_SIZE = 250000;
reg [7:0] memory0[MEM_SIZE-1:0];
reg [7:0] memory1[MEM_SIZE-1:0];
reg [7:0] memory2[MEM_SIZE-1:0];
reg [7:0] memory3[MEM_SIZE-1:0];

initial begin
    $readmemh("4g.hex", memory0);
    $readmemh("pipe.hex", memory1);
    $readmemh("21.hex", memory2);
    $readmemh("EB.hex", memory3); 
end

reg [5:0] count;
reg [7:0] pwm_count;
reg [18:0] address;
reg [7:0] sample;
reg [7:0] sub_count;
reg [1:0] current_sound;
reg sound_playing;

always @(*) begin
    case (btn)
        4'b0001: current_sound = 2'b00;
        4'b0010: current_sound = 2'b01;
        4'b0100: current_sound = 2'b10;
        4'b1000: current_sound = 2'b11;
        default: current_sound = current_sound;
    endcase
end

always @(posedge mclk) begin
    if (sw[0] && !sound_playing) begin
        sound_playing <= 1;
        address <= 0;
    end else if (!sw[0]) begin
        sound_playing <= 0;
    end

    if (sound_playing) begin
        if (count == 7) begin
            count <= 0;
            pwm_count <= pwm_count + 1;
            case (current_sound)
                2'b00: sample <= memory0[address];
                2'b01: sample <= memory1[address];
                2'b10: sample <= memory2[address];
                2'b11: sample <= memory3[address];
            endcase
            left_audio_out <= (pwm_count <= sample);
            right_audio_out <= (pwm_count <= sample);

            if (pwm_count == 255) begin
                sub_count <= sub_count + 1;
                if (sub_count == 5) begin
                    sub_count <= 0;
                    if (address == (MEM_SIZE-1)) address <= 0;
                    else address <= address + 1;
                end
            end
        end else count <= count + 1;
    end else begin
        left_audio_out <= 0;
        right_audio_out <= 0;
    end
end

endmodule
